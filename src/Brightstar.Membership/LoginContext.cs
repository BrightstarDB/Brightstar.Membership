 

// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
//
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using BrightstarDB.Client;
using BrightstarDB.EntityFramework;


namespace Brightstar.Membership 
{
    public partial class LoginContext : BrightstarEntityContext {
    	
    	static LoginContext() 
    	{
            InitializeEntityMappingStore();
        }
        
        /// <summary>
        /// Initialize the internal cache of entity attribute information.
        /// </summary>
        /// <remarks>
        /// This method is normally invoked from the static constructor for the generated context class.
        /// It is provided as a public static method to enable the use of the cached entity attribute 
        /// information without the need to construct a context (typically in test code). 
        /// In normal application code you should never need to explicitly call this method.
        /// </remarks>
        public static void InitializeEntityMappingStore()
        {
    		var provider = new ReflectionMappingProvider();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Brightstar.Membership.Model.IDeletedLogin));
    		EntityMappingStore.Instance.SetImplMapping<Brightstar.Membership.Model.IDeletedLogin, Brightstar.Membership.Model.DeletedLogin>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Brightstar.Membership.Model.ILogin));
    		EntityMappingStore.Instance.SetImplMapping<Brightstar.Membership.Model.ILogin, Brightstar.Membership.Model.Login>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Brightstar.Membership.Model.IRole));
    		EntityMappingStore.Instance.SetImplMapping<Brightstar.Membership.Model.IRole, Brightstar.Membership.Model.Role>();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified BrightstarDB
    	/// Data Object Store connection
    	/// </summary>
    	/// <param name="dataObjectStore">The connection to the BrightstarDB Data Object Store that will provide the entity objects</param>
    	public LoginContext(IDataObjectStore dataObjectStore) : base(dataObjectStore)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar connection string
    	/// </summary>
    	/// <param name="connectionString">The connection to be used to connect to an existing BrightstarDB store</param>
    	/// <param name="enableOptimisticLocking">OPTIONAL: If set to true optmistic locking will be applied to all entity updates</param>
        /// <param name="updateGraphUri">OPTIONAL: The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// not defined, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">OPTIONAL: The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If not defined, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">OPTIONAL: The URI identifier of the graph that contains version number statements for entities. 
        /// If not defined, the <paramref name="updateGraphUri"/> will be used.</param>
    	public LoginContext(
    	    string connectionString, 
    		bool? enableOptimisticLocking=null,
    		string updateGraphUri = null,
    		IEnumerable<string> datasetGraphUris = null,
    		string versionGraphUri = null
        ) : base(connectionString, enableOptimisticLocking, updateGraphUri, datasetGraphUris, versionGraphUri)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration.
    	/// </summary>
    	public LoginContext() : base()
    	{
    		InitializeContext();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration and the
    	//  specified target graphs
    	/// </summary>
        /// <param name="updateGraphUri">The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// set to null, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If set to null, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">The URI identifier of the graph that contains version number statements for entities. 
        /// If set to null, the value of <paramref name="updateGraphUri"/> will be used.</param>
    	public LoginContext(
    		string updateGraphUri,
    		IEnumerable<string> datasetGraphUris,
    		string versionGraphUri
    	) : base(updateGraphUri:updateGraphUri, datasetGraphUris:datasetGraphUris, versionGraphUri:versionGraphUri)
    	{
    		InitializeContext();
    	}
    	
    	private void InitializeContext() 
    	{
    		DeletedLogins = 	new BrightstarEntitySet<Brightstar.Membership.Model.IDeletedLogin>(this);
    		Logins = 	new BrightstarEntitySet<Brightstar.Membership.Model.ILogin>(this);
    		Roles = 	new BrightstarEntitySet<Brightstar.Membership.Model.IRole>(this);
    	}
    	
    	public IEntitySet<Brightstar.Membership.Model.IDeletedLogin> DeletedLogins
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<Brightstar.Membership.Model.ILogin> Logins
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<Brightstar.Membership.Model.IRole> Roles
    	{
    		get; private set;
    	}
    	
        public IEntitySet<T> EntitySet<T>() where T : class {
            var itemType = typeof(T);
            if (typeof(T).Equals(typeof(Brightstar.Membership.Model.IDeletedLogin))) {
                return (IEntitySet<T>)this.DeletedLogins;
            }
            if (typeof(T).Equals(typeof(Brightstar.Membership.Model.ILogin))) {
                return (IEntitySet<T>)this.Logins;
            }
            if (typeof(T).Equals(typeof(Brightstar.Membership.Model.IRole))) {
                return (IEntitySet<T>)this.Roles;
            }
            throw new InvalidOperationException(typeof(T).FullName + " is not a recognized entity interface type.");
        }
    
        } // end class LoginContext
        
}
namespace Brightstar.Membership.Model 
{
    
    public partial class DeletedLogin : BrightstarEntityObject, IDeletedLogin 
    {
    	public DeletedLogin(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public DeletedLogin(BrightstarEntityContext context) : base(context, typeof(DeletedLogin)) { }
    	public DeletedLogin() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Brightstar.Membership.Model.IDeletedLogin
    	#endregion
    }
}
namespace Brightstar.Membership.Model 
{
    
    public partial class Login : BrightstarEntityObject, ILogin 
    {
    	public Login(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Login(BrightstarEntityContext context) : base(context, typeof(Login)) { }
    	public Login() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Brightstar.Membership.Model.ILogin
    
    	public System.String ApplicationName
    	{
            		get { return GetRelatedProperty<System.String>("ApplicationName"); }
            		set { SetRelatedProperty("ApplicationName", value); }
    	}
    
    	public System.String Username
    	{
            		get { return GetRelatedProperty<System.String>("Username"); }
            		set { SetRelatedProperty("Username", value); }
    	}
    
    	public System.Byte[] Password
    	{
            		get { return GetRelatedProperty<System.Byte[]>("Password"); }
            		set { SetRelatedProperty("Password", value); }
    	}
    
    	public System.Byte[] PasswordSalt
    	{
            		get { return GetRelatedProperty<System.Byte[]>("PasswordSalt"); }
            		set { SetRelatedProperty("PasswordSalt", value); }
    	}
    
    	public System.Int32 PasswordIterations
    	{
            		get { return GetRelatedProperty<System.Int32>("PasswordIterations"); }
            		set { SetRelatedProperty("PasswordIterations", value); }
    	}
    
    	public System.String PasswordQuestion
    	{
            		get { return GetRelatedProperty<System.String>("PasswordQuestion"); }
            		set { SetRelatedProperty("PasswordQuestion", value); }
    	}
    
    	public System.Byte[] PasswordAnswer
    	{
            		get { return GetRelatedProperty<System.Byte[]>("PasswordAnswer"); }
            		set { SetRelatedProperty("PasswordAnswer", value); }
    	}
    
    	public System.Byte[] PasswordAnswerSalt
    	{
            		get { return GetRelatedProperty<System.Byte[]>("PasswordAnswerSalt"); }
            		set { SetRelatedProperty("PasswordAnswerSalt", value); }
    	}
    
    	public System.Int32 PasswordAnswerIterations
    	{
            		get { return GetRelatedProperty<System.Int32>("PasswordAnswerIterations"); }
            		set { SetRelatedProperty("PasswordAnswerIterations", value); }
    	}
    
    	public System.String Email
    	{
            		get { return GetRelatedProperty<System.String>("Email"); }
            		set { SetRelatedProperty("Email", value); }
    	}
    
    	public System.String Comments
    	{
            		get { return GetRelatedProperty<System.String>("Comments"); }
            		set { SetRelatedProperty("Comments", value); }
    	}
    
    	public System.DateTime CreatedDate
    	{
            		get { return GetRelatedProperty<System.DateTime>("CreatedDate"); }
            		set { SetRelatedProperty("CreatedDate", value); }
    	}
    
    	public System.DateTime LastActive
    	{
            		get { return GetRelatedProperty<System.DateTime>("LastActive"); }
            		set { SetRelatedProperty("LastActive", value); }
    	}
    
    	public System.DateTime LastLoginDate
    	{
            		get { return GetRelatedProperty<System.DateTime>("LastLoginDate"); }
            		set { SetRelatedProperty("LastLoginDate", value); }
    	}
    
    	public System.Boolean IsActivated
    	{
            		get { return GetRelatedProperty<System.Boolean>("IsActivated"); }
            		set { SetRelatedProperty("IsActivated", value); }
    	}
    
    	public System.Boolean IsLockedOut
    	{
            		get { return GetRelatedProperty<System.Boolean>("IsLockedOut"); }
            		set { SetRelatedProperty("IsLockedOut", value); }
    	}
    
    	public System.DateTime LastLockedOutDate
    	{
            		get { return GetRelatedProperty<System.DateTime>("LastLockedOutDate"); }
            		set { SetRelatedProperty("LastLockedOutDate", value); }
    	}
    
    	public System.String LastLockedOutReason
    	{
            		get { return GetRelatedProperty<System.String>("LastLockedOutReason"); }
            		set { SetRelatedProperty("LastLockedOutReason", value); }
    	}
    
    	public System.Nullable<System.Int32> LoginAttempts
    	{
            		get { return GetRelatedProperty<System.Nullable<System.Int32>>("LoginAttempts"); }
            		set { SetRelatedProperty("LoginAttempts", value); }
    	}
    	public System.Collections.Generic.ICollection<System.String> Roles
    	{
    		get { return GetRelatedLiteralPropertiesCollection<System.String>("Roles"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<System.String>("Roles", value); }
    	}
    	#endregion
    }
}
namespace Brightstar.Membership.Model 
{
    
    public partial class Role : BrightstarEntityObject, IRole 
    {
    	public Role(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Role(BrightstarEntityContext context) : base(context, typeof(Role)) { }
    	public Role() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Brightstar.Membership.Model.IRole
    	#endregion
    }
}
